# ===================================================================
# Application Properties
#
# This file configures the application.
# - For local development (running directly, e.g., from your IDE):
#   It uses localhost for the database and expects API_SECRET as an environment variable.
# - When running with Docker Compose (using docker-compose.yml):
#   Database settings (URL, username, password) and API_SECRET are
#   overridden by environment variables defined in docker-compose.yml.
# ===================================================================

# --- Database Configuration (for local development) ---
# When using Docker, docker-compose.yml overrides spring.datasource.url
# to jdbc:postgresql://db:5432/books, and also sets username/password.
spring.datasource.url=jdbc:postgresql://localhost:5432/books
spring.datasource.username=postgres
spring.datasource.password=admin
# spring.datasource.driver-class-name=org.postgresql.Driver # Optional, Spring Boot usually auto-detects this

# --- JPA / Hibernate Configuration ---
spring.jpa.show-sql=true
# 'update' is convenient for development.
# This is also set to 'update' via SPRING_JPA_HIBERNATE_DDL_AUTO in docker-compose.yml.
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# --- Spring MVC Configuration ---
# This is often required for Springfox (which you are using with @EnableSwagger2 and @EnableOpenApi)
# to work correctly with Spring Boot 2.6+ due to changes in path matching.
# If you migrate to Springdoc-openapi in the future, this might not be needed.
spring.mvc.pathmatch.matching-strategy=ant_path_matcher

# --- Spring Boot Legacy Property Processing ---
# This property (spring.config.use-legacy-processing=true) was introduced in Spring Boot 2.4
# to handle how properties from bootstrap.properties and application.properties are loaded,
# especially relevant with Spring Cloud Config.
# If your project doesn't use Spring Cloud Config or face issues with property loading order,
# you might be able to remove this. Review if it's still necessary for your specific setup.
spring.config.use-legacy-processing=true

# --- Application API Secret ---
# This secret is used for security features (e.g., JWT generation/validation).
# It MUST be set as an environment variable named API_SECRET.
#
# For local development (running the app directly):
#   Set the API_SECRET environment variable in your system or IDE run configuration.
#   Example (Linux/macOS): export API_SECRET="your_local_dev_secret_value_here"
#   Example (Windows PowerShell): $env:API_SECRET="your_local_dev_secret_value_here"
#
# When running with Docker:
#   The docker-compose.yml file passes the API_SECRET environment variable
#   to the application container (sourced from your .env file or host environment).
#
# The application will fail to start if the API_SECRET environment variable is not set.
api.secret=${API_SECRET}
